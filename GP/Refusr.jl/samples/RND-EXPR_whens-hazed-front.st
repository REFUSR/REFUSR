(*
This code implements a randomly grown symbolic expression:

xor(xor(!((IN9 | ((((!(xor(xor(IN33 & IN37, IN32 | IN16), IN5 & IN45))) | (xor(xor((IN14 & IN46) | (xor(xor(IN30, IN6), IN11)), (!(IN37)) & (!(IN11))), xor(xor(IN9 & IN22, !(IN4)), xor(xor(IN45, IN21), IN19))))) | IN23) & (!((!(IN3 | (!(IN4)))) & (xor(xor((xor(xor(IN24, IN16), IN24)) | (IN28 & IN45), IN3), (xor(xor(IN31, IN3), IN4)) & (IN31 & IN48))))))) | (xor(xor((!(xor(xor(xor(xor(IN30, !(!(IN11))), (xor(xor(IN8, IN15), IN20)) & (xor(xor(IN9, IN29), IN30))), !((!(IN24)) | (IN24 & IN1))), xor(xor(xor(xor(IN1 & IN30, IN8 | IN33), xor(xor(IN13, IN42), IN9)), xor(xor(!(IN40), IN31), xor(xor(IN37, IN19), IN4))), !(IN12 & IN15))))) & ((((IN9 & (!(IN16))) | (!(!(IN42)))) | (!(!(xor(xor(IN26, IN2), IN6))))) | (!(!(xor(xor(IN37, xor(xor(IN33, IN2), IN32)), IN49 & IN28))))), (((xor(xor(!(IN42), xor(xor(IN29, IN13 & IN14), IN28 | IN40)), xor(xor(xor(true, IN34), IN45 | IN21), !(IN30)))) & (xor(xor(!(xor(xor(IN19, IN21), IN21)), IN50), xor(xor(IN40 | IN35, IN33), IN31 & IN44)))) & (xor(xor(IN34 & (!(IN15 | IN25)), (!(!(IN43))) | ((IN42 & IN24) & (!(IN48)))), !((!(IN25)) & (IN42 | IN12))))) | (((xor(xor((true & IN35) | (xor(xor(IN32, IN34), IN45)), (xor(xor(IN43, IN27), IN32)) & (!(IN39))), IN15)) | (IN49 | (!(false & IN26)))) | ((!(xor(xor(IN26 | IN36, xor(xor(IN38, IN18), IN21)), IN3 | IN13))) & (((xor(xor(IN44, IN50), IN8)) | (xor(xor(IN47, IN23), true))) | (!(xor(xor(IN46, IN35), IN32))))))), IN8))), ((IN39 | (!(xor(xor(IN43 | ((xor(xor(!(IN37), IN17 | IN33), xor(xor(IN50, IN18), IN19))) | IN8), IN6), IN13 & ((xor(xor(IN19 & IN37, !(IN49)), xor(xor(IN3, IN1), IN42))) & ((!(IN23)) & (!(IN23)))))))) & (xor(xor(xor(xor(xor(xor(!(!(!(!(IN12)))), IN7 & (!(!(xor(xor(IN42, IN24), IN19))))), xor(xor((IN43 & (xor(xor(IN9, IN43), IN5))) & (!(IN3)), ((!(IN27)) & (IN20 | IN23)) | ((false | IN10) & (IN40 & IN41))), ((IN13 | IN44) & (IN30 & IN37)) & ((xor(xor(IN48, IN8), IN16)) | (IN9 & IN23)))), ((((xor(xor(IN30, IN5), IN21)) | (xor(xor(IN12, IN17), IN5))) | ((true | IN23) | IN21)) | IN34) | ((xor(xor((IN20 & IN35) & IN1, IN13), (IN29 | IN12) | (IN4 & IN38))) & (!((IN37 | IN10) & IN10)))), !(IN32)), IN44), (xor(xor(((IN14 | IN25) | ((IN49 & IN38) & (xor(xor(IN6, IN28), IN12)))) | (IN6 & IN45), (!(IN25)) | (xor(xor(IN24, !(true | IN25)), !(IN41)))), IN48)) | (!(!((!(IN30 & IN26)) & (xor(xor(!(IN28), !(IN22)), xor(xor(IN5, IN7), IN3))))))))) & ((xor(xor((IN16 & ((!((IN31 | IN50) | IN4)) & (((!(IN34)) & (xor(xor(IN9, IN23), IN8))) | (!(IN6 | IN3))))) & (((((!(IN8)) | true) & (IN41 | IN50)) & IN36) & (xor(xor((xor(xor(IN25 & IN3, IN48 & IN38), IN39 | IN10)) & (xor(xor(!(IN31), IN8 | IN43), false)), ((IN45 | IN3) | (xor(xor(IN13, IN25), false))) | (!(IN35))), xor(xor(xor(xor(IN5, IN32), !(IN24)), IN39), !(IN34 & IN27))))), xor(xor((!(xor(xor(!(xor(xor(IN12, IN25), IN39)), !(!(IN12))), (IN50 | IN10) & (!(IN31))))) & ((xor(xor(xor(xor(xor(xor(IN40, IN24), IN20), xor(xor(IN18, IN19), IN19)), !(IN24)), xor(xor(IN44, !(IN14)), !(IN25))), !(!(IN18)))) & (!(IN19))), IN21), IN37 & (xor(xor(((IN46 & IN50) | (!(IN9))) & (!(IN35)), IN30), IN36 & (!(xor(xor(IN17, IN11), IN40))))))), IN28)) & ((((xor(xor(IN20, (xor(xor(IN2 | IN33, xor(xor(IN33, IN7), IN50)), !(IN49))) & IN45), xor(xor((IN6 & IN13) & (IN33 & IN29), (IN48 | IN50) & IN6), xor(xor(IN36 | IN20, xor(xor(IN16, IN44), IN9)), IN30 | IN42)))) | IN2) | (xor(xor(!((!(IN40 & IN10)) & (xor(xor(IN22 & IN27, !(IN4)), IN32 & IN48))), !((xor(xor(IN24 & IN32, IN47), IN12 & IN3)) & (IN16 | (IN8 | IN13)))), IN32))) | (IN47 & (!(!(IN34 & ((xor(xor(IN10, IN39), IN35)) | IN22)))))))), (xor(xor(!(!(!(xor(xor(((!(IN12)) | (!(IN22))) & ((IN50 & IN39) & (IN17 & false)), (!(IN50 | IN48)) | ((xor(xor(IN43, IN42), IN48)) | (false | IN44))), (!(!(IN38))) | IN32)))), xor(xor(IN7 | IN37, !(!(xor(xor(xor(xor((IN21 & IN16) & (IN17 | IN33), xor(xor(IN8 & IN49, IN45 | IN28), IN32)), IN38), !(xor(xor(IN14 | IN34, xor(xor(IN2, IN20), false)), IN20 & IN11))), IN20 | ((xor(xor(IN40, IN35), false)) | (IN39 & IN1)))))), !((xor(xor(!(IN5), IN37), !(IN42 & IN5))) & (xor(xor(!((IN4 & IN43) & (IN34 & IN50)), IN11), IN30 & (IN5 & (IN28 & IN49))))))), xor(xor(!(IN30), !(IN18)), (!(IN1 & IN21)) | ((xor(xor((!(IN48 | IN14)) | ((IN7 & false) | IN33), ((xor(xor(IN3, IN10), IN2)) | (!(IN47))) & (xor(xor(xor(xor(IN10, IN18), IN43), !(IN12)), xor(xor(IN31, IN34), IN18)))), xor(xor((xor(xor(IN9, IN26), IN36)) & (IN3 & IN10), IN47), (IN35 | IN48) | (xor(xor(IN48, IN22), IN16))))) & (xor(xor(IN50, (IN47 & (IN39 & IN50)) | (xor(xor(xor(xor(IN27, IN27), IN43), !(IN32)), !(IN35)))), (!(!(IN42))) & (!(IN14 | IN49)))))))) | (!(xor(xor((((xor(xor(!(xor(xor(IN50, IN24), IN32)), xor(xor(IN15 | IN44, IN18), !(IN15))), IN33 & (IN33 & IN20))) & (xor(xor(!(IN7 & IN11), !(IN9)), (IN18 & IN38) & (!(IN41))))) & ((!(!(IN1 & IN47))) | (!(xor(xor(!(IN3), IN3 & IN43), xor(xor(IN41, IN42), IN18)))))) & (((IN33 | (!(IN15))) & (!((!(IN10)) & (IN36 | IN37)))) | (IN44 & (xor(xor(xor(xor(IN48 | IN36, IN25), !(IN11)), !(!(IN30))), xor(xor(!(IN16), IN12 | IN31), !(IN37)))))), (IN30 & (xor(xor(true & IN37, IN2), (IN49 | (!(IN49))) | IN17))) & (xor(xor((!(IN7)) | (!(xor(xor(IN44 & IN16, IN23 | IN11), xor(xor(IN43, IN43), IN40)))), (!((IN50 & IN32) & (IN27 & IN27))) & (!((IN44 & IN38) | (IN23 | IN34)))), xor(xor(xor(xor(xor(xor(IN47 & IN37, IN11 | IN32), !(IN28)), xor(xor(IN45 & IN50, IN25 & IN34), IN26 & IN49)), (!(IN30)) & (xor(xor(IN28, IN50), IN14))), ((xor(xor(IN2, IN48), IN17)) | (!(IN19))) | (xor(xor(!(IN16), IN26), IN46 | IN8))), xor(xor(IN9, IN9 & (!(IN30))), (!(IN41)) & IN13))))), !(((!((!(IN14)) & (IN49 | IN18))) & IN47) & (!(xor(xor((xor(xor(IN15, IN44), IN42)) | IN35, (IN42 | IN47) | (IN19 & IN28)), (IN10 & IN48) | (IN31 & IN25)))))))))

*)

FUNCTION_BLOCK F_CollectInput
  VAR_IN_OUT
      Data : ARRAY[1..50] OF BOOL;
  END_VAR
  VAR_INPUT
      TICK  : BOOL := 0;
      IN1   : BOOL := 0;
      IN2   : BOOL := 0;
      IN3   : BOOL := 0;
      IN4   : BOOL := 0;
      IN5   : BOOL := 0;
      RESET : BOOL := FALSE;
  END_VAR
  VAR_OUTPUT
      Finished : BOOL;
  END_VAR
  VAR
      j    : USINT := 1;
      tock : BOOL  := 0;
  END_VAR
  IF NOT RESET AND tock = NOT TICK THEN
      Data[j]   := IN1;
      Data[j+1] := IN2;
      Data[j+2] := IN3;
      Data[j+3] := IN4;
      Data[j+4] := IN5;
      j := j + 5;
      tock := TICK;
  ELSE
      j := 1;
      tock := 0;
  END_IF;
  Finished := (j > 50);
END_FUNCTION_BLOCK


PROGRAM Boiler
  VAR
    Data  : ARRAY[1..50] OF BOOL;
    Ready : BOOL;
    CollectInput : F_CollectInput;
  END_VAR
  VAR
    TICK     AT %IX1.0 : BOOL;
    IN1      AT %IX0.3 : BOOL;
    IN2      AT %IX0.4 : BOOL;
    IN3      AT %IX0.5 : BOOL;
    IN4      AT %IX0.6 : BOOL;
    IN5      AT %IX0.7 : BOOL;
    OutReady AT %QX0.0 : BOOL := FALSE;
    FeedNext AT %QX0.1 : BOOL := FALSE;
    Out      AT %QX0.2 : BOOL;
  END_VAR
  CollectInput(TICK:=TICK, IN1:=IN1, IN2:=IN2, IN3:=IN3, IN4:=IN4, IN5:=IN5);
  Ready := CollectInput.Finished;
  FeedNext := 1;
  IF Ready THEN
    Out := (((NOT ((Data[9] OR ((((NOT (((Data[33] AND Data[37]) XOR (Data[32] OR Data[16])) XOR (Data[5] AND Data[45]))) OR ((((Data[14] AND Data[46]) OR ((Data[30] XOR Data[6]) XOR Data[11])) XOR ((NOT Data[37]) AND (NOT Data[11]))) XOR (((Data[9] AND Data[22]) XOR (NOT Data[4])) XOR ((Data[45] XOR Data[21]) XOR Data[19])))) OR Data[23]) AND (NOT ((NOT (Data[3] OR (NOT Data[4]))) AND (((((Data[24] XOR Data[16]) XOR Data[24]) OR (Data[28] AND Data[45])) XOR Data[3]) XOR (((Data[31] XOR Data[3]) XOR Data[4]) AND (Data[31] AND Data[48]))))))) OR ((((NOT ((((Data[30] XOR (NOT (NOT Data[11]))) XOR (((Data[8] XOR Data[15]) XOR Data[20]) AND ((Data[9] XOR Data[29]) XOR Data[30]))) XOR (NOT ((NOT Data[24]) OR (Data[24] AND Data[1])))) XOR (((((Data[1] AND Data[30]) XOR (Data[8] OR Data[33])) XOR ((Data[13] XOR Data[42]) XOR Data[9])) XOR (((NOT Data[40]) XOR Data[31]) XOR ((Data[37] XOR Data[19]) XOR Data[4]))) XOR (NOT (Data[12] AND Data[15]))))) AND ((((Data[9] AND (NOT Data[16])) OR (NOT (NOT Data[42]))) OR (NOT (NOT ((Data[26] XOR Data[2]) XOR Data[6])))) OR (NOT (NOT ((Data[37] XOR ((Data[33] XOR Data[2]) XOR Data[32])) XOR (Data[49] AND Data[28])))))) XOR ((((((NOT Data[42]) XOR ((Data[29] XOR (Data[13] AND Data[14])) XOR (Data[28] OR Data[40]))) XOR (((TRUE XOR Data[34]) XOR (Data[45] OR Data[21])) XOR (NOT Data[30]))) AND (((NOT ((Data[19] XOR Data[21]) XOR Data[21])) XOR Data[50]) XOR (((Data[40] OR Data[35]) XOR Data[33]) XOR (Data[31] AND Data[44])))) AND (((Data[34] AND (NOT (Data[15] OR Data[25]))) XOR ((NOT (NOT Data[43])) OR ((Data[42] AND Data[24]) AND (NOT Data[48])))) XOR (NOT ((NOT Data[25]) AND (Data[42] OR Data[12]))))) OR ((((((TRUE AND Data[35]) OR ((Data[32] XOR Data[34]) XOR Data[45])) XOR (((Data[43] XOR Data[27]) XOR Data[32]) AND (NOT Data[39]))) XOR Data[15]) OR (Data[49] OR (NOT (FALSE AND Data[26])))) OR ((NOT (((Data[26] OR Data[36]) XOR ((Data[38] XOR Data[18]) XOR Data[21])) XOR (Data[3] OR Data[13]))) AND ((((Data[44] XOR Data[50]) XOR Data[8]) OR ((Data[47] XOR Data[23]) XOR TRUE)) OR (NOT ((Data[46] XOR Data[35]) XOR Data[32]))))))) XOR Data[8]))) XOR (((Data[39] OR (NOT (((Data[43] OR ((((NOT Data[37]) XOR (Data[17] OR Data[33])) XOR ((Data[50] XOR Data[18]) XOR Data[19])) OR Data[8])) XOR Data[6]) XOR (Data[13] AND ((((Data[19] AND Data[37]) XOR (NOT Data[49])) XOR ((Data[3] XOR Data[1]) XOR Data[42])) AND ((NOT Data[23]) AND (NOT Data[23]))))))) AND (((((((NOT (NOT (NOT (NOT Data[12])))) XOR (Data[7] AND (NOT (NOT ((Data[42] XOR Data[24]) XOR Data[19]))))) XOR ((((Data[43] AND ((Data[9] XOR Data[43]) XOR Data[5])) AND (NOT Data[3])) XOR (((NOT Data[27]) AND (Data[20] OR Data[23])) OR ((FALSE OR Data[10]) AND (Data[40] AND Data[41])))) XOR (((Data[13] OR Data[44]) AND (Data[30] AND Data[37])) AND (((Data[48] XOR Data[8]) XOR Data[16]) OR (Data[9] AND Data[23]))))) XOR ((((((Data[30] XOR Data[5]) XOR Data[21]) OR ((Data[12] XOR Data[17]) XOR Data[5])) OR ((TRUE OR Data[23]) OR Data[21])) OR Data[34]) OR (((((Data[20] AND Data[35]) AND Data[1]) XOR Data[13]) XOR ((Data[29] OR Data[12]) OR (Data[4] AND Data[38]))) AND (NOT ((Data[37] OR Data[10]) AND Data[10]))))) XOR (NOT Data[32])) XOR Data[44]) XOR ((((((Data[14] OR Data[25]) OR ((Data[49] AND Data[38]) AND ((Data[6] XOR Data[28]) XOR Data[12]))) OR (Data[6] AND Data[45])) XOR ((NOT Data[25]) OR ((Data[24] XOR (NOT (TRUE OR Data[25]))) XOR (NOT Data[41])))) XOR Data[48]) OR (NOT (NOT ((NOT (Data[30] AND Data[26])) AND (((NOT Data[28]) XOR (NOT Data[22])) XOR ((Data[5] XOR Data[7]) XOR Data[3])))))))) AND (((((Data[16] AND ((NOT ((Data[31] OR Data[50]) OR Data[4])) AND (((NOT Data[34]) AND ((Data[9] XOR Data[23]) XOR Data[8])) OR (NOT (Data[6] OR Data[3]))))) AND (((((NOT Data[8]) OR TRUE) AND (Data[41] OR Data[50])) AND Data[36]) AND ((((((Data[25] AND Data[3]) XOR (Data[48] AND Data[38])) XOR (Data[39] OR Data[10])) AND (((NOT Data[31]) XOR (Data[8] OR Data[43])) XOR FALSE)) XOR (((Data[45] OR Data[3]) OR ((Data[13] XOR Data[25]) XOR FALSE)) OR (NOT Data[35]))) XOR ((((Data[5] XOR Data[32]) XOR (NOT Data[24])) XOR Data[39]) XOR (NOT (Data[34] AND Data[27])))))) XOR ((((NOT (((NOT ((Data[12] XOR Data[25]) XOR Data[39])) XOR (NOT (NOT Data[12]))) XOR ((Data[50] OR Data[10]) AND (NOT Data[31])))) AND (((((((Data[40] XOR Data[24]) XOR Data[20]) XOR ((Data[18] XOR Data[19]) XOR Data[19])) XOR (NOT Data[24])) XOR ((Data[44] XOR (NOT Data[14])) XOR (NOT Data[25]))) XOR (NOT (NOT Data[18]))) AND (NOT Data[19]))) XOR Data[21]) XOR (Data[37] AND (((((Data[46] AND Data[50]) OR (NOT Data[9])) AND (NOT Data[35])) XOR Data[30]) XOR (Data[36] AND (NOT ((Data[17] XOR Data[11]) XOR Data[40]))))))) XOR Data[28]) AND (((((Data[20] XOR ((((Data[2] OR Data[33]) XOR ((Data[33] XOR Data[7]) XOR Data[50])) XOR (NOT Data[49])) AND Data[45])) XOR ((((Data[6] AND Data[13]) AND (Data[33] AND Data[29])) XOR ((Data[48] OR Data[50]) AND Data[6])) XOR (((Data[36] OR Data[20]) XOR ((Data[16] XOR Data[44]) XOR Data[9])) XOR (Data[30] OR Data[42])))) OR Data[2]) OR (((NOT ((NOT (Data[40] AND Data[10])) AND (((Data[22] AND Data[27]) XOR (NOT Data[4])) XOR (Data[32] AND Data[48])))) XOR (NOT ((((Data[24] AND Data[32]) XOR Data[47]) XOR (Data[12] AND Data[3])) AND (Data[16] OR (Data[8] OR Data[13]))))) XOR Data[32])) OR (Data[47] AND (NOT (NOT (Data[34] AND (((Data[10] XOR Data[39]) XOR Data[35]) OR Data[22]))))))))) XOR ((((NOT (NOT (NOT (((((NOT Data[12]) OR (NOT Data[22])) AND ((Data[50] AND Data[39]) AND (Data[17] AND FALSE))) XOR ((NOT (Data[50] OR Data[48])) OR (((Data[43] XOR Data[42]) XOR Data[48]) OR (FALSE OR Data[44])))) XOR ((NOT (NOT Data[38])) OR Data[32]))))) XOR (((Data[7] OR Data[37]) XOR (NOT (NOT ((((((Data[21] AND Data[16]) AND (Data[17] OR Data[33])) XOR (((Data[8] AND Data[49]) XOR (Data[45] OR Data[28])) XOR Data[32])) XOR Data[38]) XOR (NOT (((Data[14] OR Data[34]) XOR ((Data[2] XOR Data[20]) XOR FALSE)) XOR (Data[20] AND Data[11])))) XOR (Data[20] OR (((Data[40] XOR Data[35]) XOR FALSE) OR (Data[39] AND Data[1]))))))) XOR (NOT ((((NOT Data[5]) XOR Data[37]) XOR (NOT (Data[42] AND Data[5]))) AND (((NOT ((Data[4] AND Data[43]) AND (Data[34] AND Data[50]))) XOR Data[11]) XOR (Data[30] AND (Data[5] AND (Data[28] AND Data[49])))))))) XOR (((NOT Data[30]) XOR (NOT Data[18])) XOR ((NOT (Data[1] AND Data[21])) OR (((((NOT (Data[48] OR Data[14])) OR ((Data[7] AND FALSE) OR Data[33])) XOR ((((Data[3] XOR Data[10]) XOR Data[2]) OR (NOT Data[47])) AND ((((Data[10] XOR Data[18]) XOR Data[43]) XOR (NOT Data[12])) XOR ((Data[31] XOR Data[34]) XOR Data[18])))) XOR (((((Data[9] XOR Data[26]) XOR Data[36]) AND (Data[3] AND Data[10])) XOR Data[47]) XOR ((Data[35] OR Data[48]) OR ((Data[48] XOR Data[22]) XOR Data[16])))) AND ((Data[50] XOR ((Data[47] AND (Data[39] AND Data[50])) OR ((((Data[27] XOR Data[27]) XOR Data[43]) XOR (NOT Data[32])) XOR (NOT Data[35])))) XOR ((NOT (NOT Data[42])) AND (NOT (Data[14] OR Data[49])))))))) OR (NOT ((((((((NOT ((Data[50] XOR Data[24]) XOR Data[32])) XOR (((Data[15] OR Data[44]) XOR Data[18]) XOR (NOT Data[15]))) XOR (Data[33] AND (Data[33] AND Data[20]))) AND (((NOT (Data[7] AND Data[11])) XOR (NOT Data[9])) XOR ((Data[18] AND Data[38]) AND (NOT Data[41])))) AND ((NOT (NOT (Data[1] AND Data[47]))) OR (NOT (((NOT Data[3]) XOR (Data[3] AND Data[43])) XOR ((Data[41] XOR Data[42]) XOR Data[18]))))) AND (((Data[33] OR (NOT Data[15])) AND (NOT ((NOT Data[10]) AND (Data[36] OR Data[37])))) OR (Data[44] AND (((((Data[48] OR Data[36]) XOR Data[25]) XOR (NOT Data[11])) XOR (NOT (NOT Data[30]))) XOR (((NOT Data[16]) XOR (Data[12] OR Data[31])) XOR (NOT Data[37])))))) XOR ((Data[30] AND (((TRUE AND Data[37]) XOR Data[2]) XOR ((Data[49] OR (NOT Data[49])) OR Data[17]))) AND ((((NOT Data[7]) OR (NOT (((Data[44] AND Data[16]) XOR (Data[23] OR Data[11])) XOR ((Data[43] XOR Data[43]) XOR Data[40])))) XOR ((NOT ((Data[50] AND Data[32]) AND (Data[27] AND Data[27]))) AND (NOT ((Data[44] AND Data[38]) OR (Data[23] OR Data[34]))))) XOR (((((((Data[47] AND Data[37]) XOR (Data[11] OR Data[32])) XOR (NOT Data[28])) XOR (((Data[45] AND Data[50]) XOR (Data[25] AND Data[34])) XOR (Data[26] AND Data[49]))) XOR ((NOT Data[30]) AND ((Data[28] XOR Data[50]) XOR Data[14]))) XOR ((((Data[2] XOR Data[48]) XOR Data[17]) OR (NOT Data[19])) OR (((NOT Data[16]) XOR Data[26]) XOR (Data[46] OR Data[8])))) XOR ((Data[9] XOR (Data[9] AND (NOT Data[30]))) XOR ((NOT Data[41]) AND Data[13])))))) XOR (NOT (((NOT ((NOT Data[14]) AND (Data[49] OR Data[18]))) AND Data[47]) AND (NOT (((((Data[15] XOR Data[44]) XOR Data[42]) OR Data[35]) XOR ((Data[42] OR Data[47]) OR (Data[19] AND Data[28]))) XOR ((Data[10] AND Data[48]) OR (Data[31] AND Data[25]))))))))));
    OutReady := 1;
    CollectInput(RESET:=TRUE);
  END_IF;
END_PROGRAM


CONFIGURATION Config0
  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : Boiler;
  END_RESOURCE
END_CONFIGURATION
